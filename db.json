{
"flashCards": [
   {
      "question": "What does 'DOM' stand for in JavaScript?",
      "answer": "Document Object Model",
      "example": "Accessing and manipulating HTML elements using JavaScript."
    },
    {
      "question": "How do you declare a variable in JavaScript?",
      "answer": "Using 'var', 'let', or 'const' keyword.",
      "example": "let myVariable = 10;"
    },
    {
      "question": "What is the purpose of 'console.log()'?",
      "answer": "Output information to the console for debugging.",
      "example": "console.log('Hello, World!');"
    },
    {
      "question": "What is an array in JavaScript?",
      "answer": "A data structure that stores a collection of elements.",
      "example": "let colors = ['red', 'green', 'blue'];"
    },
    {
      "question": "Explain the difference between '==' and '===' in JavaScript.",
      "answer": "'==' checks for equality, while '===' checks for both value and type equality.",
      "example": "5 == '5' is true, but 5 === '5' is false."
    },
    {
      "question": "What is the purpose of the 'function' keyword in JavaScript?",
      "answer": "Declares a function in JavaScript.",
      "example": "function addNumbers(a, b) { return a + b; }"
    },
    {
      "question": "How do you comment in JavaScript?",
      "answer": "Using '//' for single-line comments and '/* */' for multi-line comments.",
      "example": "// This is a single-line comment\n/* This is a\n   multi-line comment */"
    },
    {
      "question": "What is an arrow function in JavaScript?",
      "answer": "A concise way to write function expressions.",
      "example": "const add = (a, b) => a + b;"
    },
    {
      "question": "Explain the purpose of the 'this' keyword in JavaScript.",
      "answer": "Refers to the current object.",
      "example": "const person = { name: 'John', greet: function() { console.log('Hello, ' + this.name + '!'); } };"
    },
    {
      "question": "How do you iterate over an array in JavaScript?",
      "answer": "Using loops like 'for' or array methods like 'forEach'.",
      "example": "const numbers = [1, 2, 3]; for (let i = 0; < numbers.length; i++) { console.log(numbers[i]); }"
    },
    {
      "question": "What is the purpose of the 'let' keyword in JavaScript?",
      "answer": "Declares a block-scoped variable.",
      "example": "let x = 5;"
    },
    {
      "question": "How do you add a class to an HTML element using JavaScript?",
      "answer": "Using the 'classList' property and the 'add' method.",
      "example": "document.getElementById('myElement').classList.add('newClass');"
    },
    {
      "question": "What is the purpose of 'async/await' keywords in JavaScript?",
      "answer": "Used to work with promises in a more synchronous way.",
      "example": "async function fetchData() { const response = await fetch('https://api.example.com/data'); const data = await response.json(); console.log(data); }"
    },
    {
      "question": "Explain the concept of event delegation in JavaScript.",
      "answer": "Handling events on parent elements rather than individual child elements.",
      "example": "<ul id='myList'><li>Item 1</li><li>Item 2</li><li>Item 3</li></ul>"
    },
    {
      "question": "What is the purpose of 'localStorage' in JavaScript?",
      "answer": "Provides a way to store key/value pairs in the browser.",
      "example": "localStorage.setItem('user', 'John'); const storedUser = localStorage.getItem('user');"
    },
    {
      "question": "How do you handle errors in JavaScript?",
      "answer": "Using 'try', 'catch', and 'finally' blocks.",
      "example": "try { /* Code that might throw an error */ } catch (error) { /* Handle the error */ } finally { /* Code that will always run */ }"
    },
    {
      "question": "What is the purpose of the 'fetch' API in JavaScript?",
      "answer": "Allows making HTTP requests in a more modern and flexible way.",
      "example": "fetch('https://api.example.com/data').then(response => response.json()).then(data => console.log(data)).catch(error => console.error('Error:', error));"
    },
    {
      "question": "How do you create a timer in JavaScript?",
      "answer": "Using 'setTimeout' or 'setInterval' functions.",
      "example": "setTimeout(() => { console.log('Delayed message'); }, 2000);"
    },
    {
      "question": "What is the purpose of the 'map' function in JavaScript?",
      "answer": "Creates a new array by applying a function to each element of an existing array.",
      "example": "const numbers = [1, 2, 3]; const doubled = numbers.map(num => num * 2);"
    },
    {
      "question": "Explain the concept of closures in JavaScript.",
      "answer": "Functions that have access to variables from their outer scope.",
      "example": "function outerFunction() { const outerVariable = 'I am from the outer function'; function innerFunction() { console.log(outerVariable); } return innerFunction; }"
    }
  ]
}